import warnings, math
import torch, torch.nn as nn
import einops

def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (Tensor, float, float, float, float) -> Tensor
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)


def drop_path(x, drop_prob: float = 0., training: bool = False):
    if drop_prob == 0. or not training:
        return x
    keep_prob = 1 - drop_prob
    shape = (x.shape[0],) + (1,) * (x.ndim - 1)  # work with diff dim tensors, not just 2D ConvNets
    random_tensor = keep_prob + torch.rand(shape, dtype=x.dtype, device=x.device)
    random_tensor.floor_()  # binarize
    output = x.div(keep_prob) * random_tensor
    return output


class DropPath(nn.Module):
    """Drop paths (Stochastic Depth) per sample  (when applied in main path of residual blocks).
    """
    def __init__(self, drop_prob=None):
        super(DropPath, self).__init__()
        self.drop_prob = drop_prob

    def forward(self, x):
        return drop_path(x, self.drop_prob, self.training)


class Mlp(nn.Module):
    def __init__(self, in_features, hidden_features=None, out_features=None, act_layer=nn.GELU, drop=0.):
        super().__init__()
        out_features = out_features or in_features
        hidden_features = hidden_features or in_features
        self.fc1 = nn.Linear(in_features, hidden_features)
        self.act = act_layer()
        self.fc2 = nn.Linear(hidden_features, out_features)
        self.drop = nn.Dropout(drop)
        self.softmax = nn.Softmax(dim=-1)

    def forward(self, x):
        x = self.fc1(x)
        x = self.act(x)
        x = self.drop(x)
        x = self.fc2(x)
        x = self.softmax(x)
        return x


class Attention(nn.Module):
    def __init__(self, dim, num_heads=8, qkv_bias=False, qk_scale=None, attn_drop=0., proj_drop=0.):
        super().__init__()
        self.num_heads = num_heads
        head_dim = dim // num_heads
        self.scale = qk_scale or head_dim ** -0.5

        self.qkv = nn.Linear(dim, dim * 3, bias=qkv_bias)
        self.attn_drop = nn.Dropout(attn_drop)
        self.proj = nn.Linear(dim, dim)
        self.proj_drop = nn.Dropout(proj_drop)

    def forward(self, x):
        B, N, C = x.shape
        qkv = self.qkv(x).reshape(B, N, 3, self.num_heads, C // self.num_heads).permute(2, 0, 3, 1, 4)
        q, k, v = qkv[0], qkv[1], qkv[2]

        attn = (q @ k.transpose(-2, -1)) * self.scale
        attn = attn.softmax(dim=-1)
        attn = self.attn_drop(attn)

        x = (attn @ v).transpose(1, 2).reshape(B, N, C)
        x = self.proj(x)
        x = self.proj_drop(x)
        return x, attn


class Block(nn.Module):
    def __init__(self, dim, num_heads, mlp_ratio=4., qkv_bias=False, qk_scale=None, drop=0., attn_drop=0.,
                 drop_path=0., act_layer=nn.GELU, norm_layer=nn.LayerNorm):
        super().__init__()
        self.norm1 = norm_layer(dim)
        self.attn = Attention(
            dim, num_heads=num_heads, qkv_bias=qkv_bias, qk_scale=qk_scale, attn_drop=attn_drop, proj_drop=drop)
        self.drop_path = DropPath(drop_path) if drop_path > 0. else nn.Identity()
        self.norm2 = norm_layer(dim)
        mlp_hidden_dim = int(dim * mlp_ratio)
        self.mlp = Mlp(in_features=dim, hidden_features=mlp_hidden_dim, act_layer=act_layer, drop=drop)

    def forward(self, x, return_attention=False):
        y, attn = self.attn(self.norm1(x))
        if return_attention:
            return attn
        x = x + self.drop_path(y)
        x = x + self.drop_path(self.mlp(self.norm2(x)))
        return x


class VisionTransformer(nn.Module):
    """ Vision Transformer """
    def __init__(self, in_chans, embed_dim=768, depth=12, num_heads=12, mlp_ratio=4., 
                qkv_bias=False, qk_scale=None, drop_rate=0., attn_drop_rate=0., drop_path_rate=0.,
                norm_layer=nn.LayerNorm, **kwargs):
        super().__init__()
        
        self.embed_dim = embed_dim
        self.cls_token = nn.Parameter(torch.zeros(1, 1, embed_dim))

        dpr = [x.item() for x in torch.linspace(0, drop_path_rate, depth)]  # stochastic depth decay rule
        self.blocks = nn.ModuleList([
            Block(
                dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale,
                drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[i], norm_layer=norm_layer)
            for i in range(depth)])
        
        trunc_normal_(self.cls_token, std=.02)
        self.apply(self._init_weights)
    
    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=.02)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)


class MultiModalViT(nn.Module):
    def __init__(self, vit_config, num_classes, modalities, lambda_=0.5, **kwargs):
        """
        args:
            vit_config (dict): dictionnary of hyperparameters
            num_classes (int): number of classes
            modalities (List[str]): list of modalities
        """
        super().__init__()

        self.modalities = modalities
        self.lambda_ = lambda_
        
        embed_dim = vit_config['embed_dim']
        in_chans = vit_config['in_chans']

        self.patch_embed = {}
        for m in self.modalities:
            self.patch_embed.update({m: nn.Linear(in_chans, embed_dim)})
        
        self.vit = VisionTransformer(**vit_config)
        
        self.drop = nn.Dropout(0.1)
        self.mlp = nn.Linear(embed_dim, len(self.modalities)-1)
        
        self.norm = nn.LayerNorm(vit_config['embed_dim'])
        self.head = nn.Linear(vit_config['embed_dim'], num_classes)

    def prepare_tokens(self, x, cls_token, patch_embed):
        B, *_ = x.shape
        x = torch.flatten(x, start_dim=2)
        
        # patch linear embedding
        x = patch_embed(x)
        
        # add the [CLS] token to the embed patch tokens
        cls_tokens = cls_token.expand(B, -1, -1)
        x = torch.cat((cls_tokens, x), dim=1)

        return x
    
    def forward(self, x, *args):
        """
        args:
            x (dict): dictionnary containing modalities tensors
        """

        assert set(x.keys()) == set(self.modalities), "Modalities of input ({}) must match modalities of model ({})".format(list(x.keys()), self.modalities)

        # 
        for m in x.keys():
            x[m] = self.prepare_tokens(x[m], self.vit.cls_token, self.patch_embed[m])

        N = list(x.values[0]).shape[0]
        stacked_seq = torch.cat([x[m] for m in self.modalities], dim=0)
        for block in self.vit.blocks:
            stacked_seq = block(stacked_seq)
        
        stacked_seq = self.norm(stacked_seq)
        unstacked = einops.rearrange(stacked_seq, '(e n) s c -> e n s c', e=len(x), n=N).unbind(dim=0)
        for t, m in zip(unstacked, self.modalities):
            x[m] = t
        
        # multi-modal features fusion
        cls_token = x[self.modalities[0]][:,:1]
        q = self.mlp(self.drop(cls_token))
        v = torch.stack([x[m][:,0] for m in self.modalities[1:]], dim=1)
        cls_token = self.lambda_ * cls_token + (1 - self.lambda_) * (q @ v)
        
        # classification
        output = self.head(cls_token.squeeze(dim=1))

        return output, torch.stack([q.squeeze(dim=1)])


class MonoModalViT(nn.Module):
    def __init__(self, vit_config, num_classes, modality, **kwargs):
        super().__init__()

        self.modality = modality
        
        embed_dim = vit_config['embed_dim']
        in_chans = vit_config['in_chans']
        
        self.patch_embed = nn.Linear(in_chans, embed_dim)
        self.vit = VisionTransformer(**vit_config)
        
        self.norm = nn.LayerNorm(vit_config['embed_dim'])
        self.head = nn.Linear(vit_config['embed_dim'], num_classes)

    def prepare_tokens(self, x, cls_token, patch_embed):
        B, *_ = x.shape
        x = torch.flatten(x, start_dim=2)
        
        # patch linear embedding
        x = patch_embed(x)
        
        # add the [CLS] token to the embed patch tokens
        cls_tokens = cls_token.expand(B, -1, -1)
        x = torch.cat((cls_tokens, x), dim=1)

        return x
    
    def forward(self, x, return_features=False, **args):

        x = self.prepare_tokens(x, self.vit.cls_token, self.patch_embed)

        for block in self.vit.blocks:
            x = block(x)
        
        x = self.norm(x)
        output = self.head(x[:,0])
        if return_features:
            return output, x[:,0]
        else:
            return output
